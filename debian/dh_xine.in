#! /usr/bin/perl -w

=head1 NAME

dh_xine - calculates xine-lib dependencies

=cut

use strict;
use Debian::Debhelper::Dh_Lib;

=head1 SYNOPSIS

B<dh_xine> [S<I<debhelper options>>] [S<I<package name suffixes>>]

=head1 DESCRIPTION

dh_xine is a debhelper program that is responsible for generating the
${xine-x:Depends} and ${xine-console:Depends} substitutions and adding them
to substvars files.

Each xine-lib front end is required to have one of these two substvars
listed in its Depends line in debian/control. Using package names directly
will, sooner or later, break.

By listing package name suffixes, you can generate dependencies and
recommendations (almost) at will.  If you don't specify any, then 'x' and
'console' are used, generating xine-x:Depends and xine-console:Depends.

'-' generates xine:Depends which contains a dependency on libxine2 which is
suitable for use by out-of-tree plugins.

=head1 EXAMPLES

dh_xine is usually called indirectly in a rules file via the dh command.

	%:
		dh --with xine $@

It can also be called directly, prior to calling dh_gencontrol.

=head1 CONFORMS TO

Debian policy, version 3.8.1

=cut

init ();

no locale;

my @suffix;

foreach my $suffix (@ARGV) {
  if ($suffix =~ /^[-[:lower:]]*$/) {
    push @suffix, $suffix;
  } else {
    warn "bad package name suffix: $suffix";
  }
}

@suffix = ('x', 'console') if $#suffix < 0;

foreach my $package (@{$dh{DOPACKAGES}}) {
  my $tmp = tmpdir ($package);

  foreach my $suffix (@suffix) {
    if ($suffix eq '-') {
      delsubstvar($package, "xine:Depends");
      addsubstvar ($package, "xine:Depends", "libxine2 (>= @VERSION@)");
    } else {
      delsubstvar($package, "xine-$suffix:Depends");
      addsubstvar ($package, "xine-$suffix:Depends", "libxine2-$suffix");
    }
  }
}

=head1 SEE ALSO

L<debhelper(7)>

This program is not a part of debhelper.

=head1 AUTHOR

Darren Salt <linux@youmustbejoking.demon.co.uk>

=cut
